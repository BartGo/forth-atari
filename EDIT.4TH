( DR0 )
EDITOR
60 SCR !
  0 P ( EDIT BY M. DOUGHERTY, MICRO 57/FEB/83 )
  1 P ( 27 LOAD to edit, 39 LOAD for assembly )
  2 P 0 VARIABLE CLINE 0 VARIABLE CCHAR
  3 P 3 VARIABLE LINEOFF 3 VARIABLE CHAROFF
  4 P 18 CONSTANT TOP-BOT 2 CONSTANT REDGE
  5 P 22 CONSTANT LEDGE 0 VARIABLE SIDE
  6 P 17 VARIABLE EXTRAOFF 0 VARIABLE STOP
  7 P  0 VARIABLE SAV-BUF 64 ALLOT
  8 P : EREAD 16 0 DO I SCR @ (LINE) DROP
  9 P   UPDATE DROP LOOP 0 CLINE !
 10 P   0 CCHAR ! 0 SIDE ! ;
 11 P : ECLEAR 125 EMIT 1 752 C! ;
 12 P : POINT-CURSOR 85 ! 84 C! ;
 13 P : CURSOR@ CLINE @ LINEOFF @ +
 14 P  CCHAR @ SIDE @ IF 32 - ENDIF CHAROFF @ + ;
 15 P : CURSOR CURSOR@ POINT-CURSOR ; -->
61 SCR !
  0 P ( EDIT )
  1 P : SCREEN-CURSOR CURSOR@ SWAP 40 * + 106 C@ 256 *
  2 P  960 - + DUP C@ 128 XOR SWAP C! ;
  3 P : HLINE 34 0 DO TOP-BOT EMIT LOOP ;
  4 P : LADDR CLINE @ SCR @ (LINE) DROP
  5 P  SIDE @ IF 32 + ENDIF ;
  6 P : EADDR CLINE @ SCR @ (LINE) DROP
  7 P  SIDE @ 0= IF 32 + ENDIF ;
  8 P : ELINE LEDGE EMIT LADDR 32 TYPE REDGE EMIT ;
  9 P : XLINE LEDGE EMIT EADDR 32 TYPE REDGE EMIT ;
 10 P : WRITE-LINE CLINE @ LINEOFF @ + CHAROFF @ 1 -
 11 P  POINT-CURSOR ELINE ;
 12 P : WRITE-EXTRA EXTRAOFF @ LINEOFF @ + CHAROFF @ 1 -
 13 P  POINT-CURSOR XLINE ;
 14 P : TOP LINEOFF @ 1 - CHAROFF @ 1 -
 15 P  POINT-CURSOR HLINE ;  -->
62 SCR !
  0 P ( EDIT )
  1 P : BOT LINEOFF @ 16 + CHAROFF @ 1 -
  2 P  POINT-CURSOR HLINE ;
  3 P : ETITLE 0 CHAROFF @ POINT-CURSOR
  4 P  ." Screen: " SCR ? 1 CHAROFF @ POINT-CURSOR
  5 P  ." Side:   " SIDE ? ;
  6 P : DISPLAY ECLEAR ETITLE TOP CLINE @ 16 0 DO
  7 P  I CLINE ! WRITE-LINE LOOP CLINE !
  8 P  SIDE @ IF 32 ELSE 0 ENDIF CCHAR ! BOT
  9 P  WRITE-EXTRA CURSOR SCREEN-CURSOR ;
 10 P : DOCASE ?COMP CSP @ !CSP 4 ; IMMEDIATE
 11 P : CASE 4 ?PAIRS COMPILE OVER COMPILE =
 12 P  COMPILE 0BRANCH HERE 0 , COMPILE DROP 5 ; IMMEDIATE
 13 P : ENDCASE 5 ?PAIRS COMPILE BRANCH HERE 0 ,
 14 P  SWAP 2 [COMPILE] ENDIF 4 ; IMMEDIATE
 15 P -->
63 SCR !
  0 P ( EDIT )
  1 P : ENDCASES 4 ?PAIRS COMPILE DROP
  2 P   BEGIN SP@ CSP @ = 0= WHILE
  3 P   2 [COMPILE] ENDIF REPEAT
  4 P   CSP ! ; IMMEDIATE
  5 P : MOVE-RIGHT CCHAR @ 1 + SIDE @ IF
  6 P   DUP 64 = IF DROP 32 ENDIF ELSE
  7 P   DUP 32 = IF DROP 0  ENDIF ENDIF
  8 P   CCHAR ! ;
  9 P : RIGHT MOVE-RIGHT SCREEN-CURSOR ;
 10 P : RIGHT-CURSOR SCREEN-CURSOR RIGHT ;
 11 P : MOVE-LEFT CCHAR @ 1 - SIDE @ IF
 12 P  DUP 31 = IF DROP 63 ENDIF ELSE
 13 P  DUP -1 = IF DROP 31 ENDIF ENDIF
 14 P  CCHAR ! ;
 15 P : LEFT MOVE-LEFT SCREEN-CURSOR ; -->
64 SCR !
  0 P ( EDIT )
  1 P : LEFT-CURSOR SCREEN-CURSOR LEFT ;
  2 P : MOVE-UP CLINE @ 1 - 15 AND
  3 P  CLINE ! WRITE-EXTRA ;
  4 P : EUP MOVE-UP SCREEN-CURSOR ;
  5 P : UP-CURSOR SCREEN-CURSOR EUP ;
  6 P : MOVE-DOWN CLINE @ 1 + 15 AND
  7 P  CLINE ! WRITE-EXTRA ;
  8 P : DOWN MOVE-DOWN SCREEN-CURSOR ;
  9 P : DOWN-CURSOR SCREEN-CURSOR DOWN ;
 10 P : RETURN SCREEN-CURSOR SIDE @ IF
 11 P  32 ELSE 0 ENDIF CCHAR ! DOWN ;
 12 P : EXIT FLUSH 1 STOP ! ;
 13 P : EABORT EMPTY-BUFFERS 1 STOP ! ;
 14 P -->
 15 E 
65 SCR !
  0 P ( EDIT )
  1 P : ENEXT FLUSH SCR @ 1 + SCR !
  2 P   EREAD DISPLAY ;
  3 P : ELAST FLUSH SCR @ 1 - SCR !
  4 P   EREAD DISPLAY ;
  5 P : ADDR CLINE @ SCR @ (LINE) DROP
  6 P   CCHAR @ + ;
  7 P : ADDKEY DUP ADDR C! CURSOR EMIT RIGHT ;
  8 P : CHANGE-SIDE SIDE @ 1 XOR SIDE ! DISPLAY ;
  9 P : INSERT-CHAR ADDR SWAP CCHAR @ -
 10 P   SWAP OVER + SWAP -DUP IF 0 DO
 11 P   DUP 1 - C@ OVER C! 1 - LOOP
 12 P   ENDIF BL SWAP C! ;
 13 P : INSERT SIDE @ IF 63 ELSE 31 ENDIF
 14 P   INSERT-CHAR WRITE-LINE CURSOR SCREEN-CURSOR ;
 15 P -->
66 SCR !
  0 P ( EDIT )
  1 P : DELETE-CHAR ADDR SWAP CCHAR @ -
  2 P   -DUP IF 0 DO DUP 1 + C@ OVER C!
  3 P   1 + LOOP ENDIF BL SWAP C! ;
  4 P : DELETE SIDE @ IF 63 ELSE 31 ENDIF
  5 P   DELETE-CHAR WRITE-LINE CURSOR SCREEN-CURSOR ;
  6 P : L-A SCR @ (LINE) DROP ;
  7 P : DELETE-L CLINE @ L-A SAV-BUF 64 CMOVE
  8 P   15 CLINE @ - IF 15 CLINE @ DO
  9 P   I 1+ L-A I L-A 64 CMOVE LOOP ENDIF
 10 P   15 L-A 64 BLANKS ;
 11 P : INSERT-L 15 CLINE @ - IF
 12 P   CLINE @ 15 DO I 1 - L-A I L-A 64 CMOVE
 13 P   -1 +LOOP ENDIF CLINE @ L-A 64 BLANKS ;
 14 P : INSERT-LINE INSERT-L DISPLAY ;
 15 P : DELETE-LINE DELETE-L DISPLAY ; -->
67 SCR ! 
  0 P ( EDIT )
  1 P : PUT-LINE INSERT-L SAV-BUF CLINE @
  2 P   L-A 64 CMOVE DISPLAY ;
  3 P : TAB 2 0 DO RIGHT-CURSOR LOOP ;
  4 P : DEL LEFT-CURSOR BL DUP ADDR C!
  5 P   CURSOR EMIT SCREEN-CURSOR ;
  6 P : CLEAR-SCR 16 0 DO I L-A 64 BLANKS
  7 P   LOOP DISPLAY ; 
  8 P ( ** CURSOR BLINK ** ) HEX
  9 P CODE (BLNK) 02F3 LDA,  2 # AND,
 10 P 2 #  EOR, 02F3 STA, 15 # LDA,
 11 P  021A STA, RTS,
 12 P CODE BGO 15 # LDA, 
 13 P 021A STA, NEXT JMP, 
 14 P : BINIT ' (BLNK) 228 ! ; DECIMAL
 15 P : BLNK BINIT BGO ; -->
68 SCR !
  0 P ( EDIT )
  1 P : REVB 712 @ 255 XOR 712 ! ;
  2 P : ESC REVB KEY DOCASE
  3 P   83 CASE CHANGE-SIDE ENDCASE ( S )
  4 P   78 CASE ENEXT       ENDCASE ( N )
  5 P   76 CASE ELAST       ENDCASE ( L )
  6 P   69 CASE EXIT        ENDCASE ( E )
  7 P   65 CASE EABORT      ENDCASE ( A )
  8 P   80 CASE PUT-LINE    ENDCASE ( P )
  9 P   84 CASE EMPTY-BUFFERS       
 10 P           DISPLAY     ENDCASE ( T )
 11 P   BEEP ENDCASES REVB ;
 12 P : DEPTH SP@ 12 +ORIGIN @ SWAP - 2 / ;
 13 P ( IF NOTHING ON STACK, SHOW HELP )
 14 P : SETSCR 0 DEPTH IF 70 ENDIF SCR ! ;  
 15 P -->

69 SCR !
  0 P ( EDIT ENDS\ ) : EDIT ( n -- ) SETSCR
  1 P BLNK EREAD DISPLAY 0 STOP ! BEGIN KEY 
  2 P DOCASE 28 CASE UP-CURSOR ENDCASE
  3 P 27 CASE ESC ENDCASE 
  4 P 29 CASE DOWN-CURSOR ENDCASE
  5 P 31 CASE RIGHT-CURSOR ENDCASE
  6 P 30 CASE LEFT-CURSOR ENDCASE
  7 P 155 CASE RETURN ENDCASE
  8 P 255 CASE INSERT ENDCASE
  9 P 254 CASE DELETE ENDCASE
 10 P 157 CASE INSERT-LINE ENDCASE
 11 P 156 CASE DELETE-LINE ENDCASE
 12 P 126 CASE DEL ENDCASE 127 CASE TAB ENDCASE
 13 P 125 CASE CLEAR-SCR ENDCASE 
 14 P DUP ADDKEY ENDCASES
 15 P STOP @ UNTIL 125 EMIT 0 752 ! ; ;S

70 SCR ! 
  0 P ( EDIT BY M. DOUGHERTY, HELP\ ) ;S
  2 P Arrows, Insert, BckSpc: standard
  3 P Return: next line, Tab: tab (2)
  4 P Clear: clear screen (Shf> Ctl>)
  5 P Esc-T: undo scrn chn (empty-buf)
  6 P Shf-Insert: insert whole line*
  7 P Shf-Delete: delete whole line*
  8 P Ctl-Insert: insert space
  9 P Ctl-BckSpc: delete
 10 P Esc-S: change sides
 11 P Esc-N: next screen, save (flush)
 12 P Esc-L: last screen, save (flush)
 13 P Esc-E: exit, save (flush)
 14 P Esc-A: abort/exit (empty-buf)
 15 P Esc-P: put last deleted line*    ===> change to Ctl-Ins !
  
 ( => add save, remove from all, block unsaved, type screen # )
 ( arr ins bck ret tab ^clr empTb )
 ( S/N/L ^ins* ^del* Put* Ext Abt )
 
( FLUSH )
