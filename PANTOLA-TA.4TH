: --> ; ( off )

: TASK ;

( UNCHANGED )

( RAGSDALE ASSEMBLER )
VOCABULARY ASSEMBLER IMMEDIATE ASSEMBLER DEFINITIONS BASE @ HEX

0 VARIABLE INDEX -2 ALLOT 0909 , 1505 , 0115 , 8011 , 8009 ,
1D0D , 8019 , 8080 , 0080 , 1404 , 8014 , 8080 , 8080 ,
1C0C , 801C , 2C80 ,
2 VARIABLE MODE : .A 0 MODE ! ; : # 1 MODE ! ; : MEM 2 MODE ! ;
: ,X 3 MODE ! ; : ,Y 4 MODE ! ; : X) 5 MODE ! ; : )Y 6 MODE ! ;
: ) F MODE ! ; : BOT ,X 0 ; : SEC ,X 2 ; : RP) ,X 101 ;
: UPMODE IF MODE @ 8 AND 0= IF 8 MODE +! THEN THEN
1 MODE @ F AND -DUP IF 0 DO DUP + LOOP THEN OVER 1+ @ AND 0= ;
: CPU <BUILDS C, DOES> C@ C, MEM ;
00 CPU BRK, 18 CPU CLC, D8 CPU CLD, 58 CPU CLI, B8 CPU CLV,
CA CPU DEX, 88 CPU DEY, E8 CPU INX, C8 CPU INY, EA CPU NOP,
48 CPU PHA, 08 CPU PHP, 68 CPU PLA, 28 CPU PLP, 40 CPU RTI,
60 CPU RTS, 38 CPU SEC, F8 CPU SED, 78 CPU SEI, AA CPU TAX, -->
( RAGSDALE ASSEMBLER )
A8 CPU TAY, BA CPU TSX, 8A CPU TXA, 9A CPU TXS, 98 CPU TYA,
: MCP <BUILDS C, , DOES> DUP 1+ @ 80 AND IF 10 MODE +! THEN
OVER FF00 AND UPMODE UPMODE IF MEM CR LATEST ID. 3 ERROR THEN
C@ MODE C@ INDEX + C@ + C, MODE C@ 7 AND IF MODE C@ F AND 7 <
IF C, ELSE , THEN THEN MEM ;
1C6E 60 MCP ADC, 1C6E 20 MCP AND, 1C6E C0 MCP CMP,
1C6E 40 MCP EOR, 1C6E A0 MCP LDA, 1C6E 00 MCP ORA,
1C6E E0 MCP SBC, 1C6C 80 MCP STA, 0D0D 01 MCP ASL,
0C0C C1 MCP DEC, 0C0C E1 MCP INC, 0D0D 41 MCP LSR,
0D0D 21 MCP ROL, 0D0D 61 MCP ROR, 0414 81 MCP STX,
0486 E0 MCP CPX, 0486 C0 MCP CPY, 1496 A2 MCP LDX,
0C8E A0 MCP LDY, 048C 80 MCP STY, 0480 14 MCP JSR,
8480 40 MCP JMP, 0484 20 MCP BIT,
: BEGIN, HERE 1 ; IMMEDIATE
: UNTIL, ?EXEC >R 1 ?PAIRS R> C, HERE 1+ - C, ; IMMEDIATE -->
( RAGSDALE ASSEMBLER )
: IF, C, HERE 0 C, 2 ; IMMEDIATE
: THEN, ?EXEC 2 ?PAIRS HERE OVER C@ IF SWAP ! ELSE OVER 1+
- SWAP C! THEN ;  IMMEDIATE
: ELSE, 2 ?PAIRS HERE 1+ 1 JMP, SWAP HERE OVER 1+ - SWAP C!
2 ;  IMMEDIATE
: NOT 20 + ;
90 CONSTANT CS D0 CONSTANT 0= 10 CONSTANT 0< 90 CONSTANT >=

: END-CODE CURRENT @ CONTEXT ! ?EXEC ?CSP SMUDGE ;  IMMEDIATE
FORTH DEFINITIONS DECIMAL
: CODE ?EXEC CREATE [COMPILE] ASSEMBLER ASSEMBLER MEM !CSP ;
IMMEDIATE
' ASSEMBLER CFA ' ;CODE 8 + ! LATEST 12 +ORIGIN !
HERE 28 +ORIGIN ! HERE 30 +ORIGIN ! HERE FENCE !
' ASSEMBLER 6 + 32 +ORIGIN !     BASE ! FORTH ;S

FORGET TASK


( CHANGED )


( RAGSDALE ASSEMBLER 1.1 )
VOCABULARY ASSEMBLER IMMEDIATE
ASSEMBLER DEFINITIONS
BASE @ HEX

0 VARIABLE INDEX -2 ALLOT
0909 , 1505 , 0115 , 8011 ,
8009 ,
1D0D , 8019 , 8080 , 0080 ,
1404 , 8014 , 8080 , 8080 ,
1C0C , 801C , 2C80 ,

2 VARIABLE MODE : .A 0 MODE ! ;
: # 1 MODE ! ; : MEM 2 MODE ! ;
: ,X 3 MODE ! ; : ,Y 4 MODE ! ;
: X) 5 MODE ! ; : )Y 6 MODE ! ;
: ) F MODE ! ; : BOT ,X 0 ;
: SEC ,X 2 ; : RP) ,X 101 ;
: UPMODE IF MODE @ 8 AND 0=
IF 8 MODE +! THEN THEN
1 MODE @ F AND -DUP IF 0 DO DUP
+ LOOP THEN OVER 1+ @ AND 0= ;
: CPU <BUILDS C, DOES> C@ C,
MEM ;

00 CPU BRK, 18 CPU CLC,
D8 CPU CLD, 58 CPU CLI,
B8 CPU CLV,
CA CPU DEX, 88 CPU DEY,
E8 CPU INX, C8 CPU INY,
EA CPU NOP, ( --> )


48 CPU PHA, 08 CPU PHP,
68 CPU PLA, 28 CPU PLP,
40 CPU RTI,
60 CPU RTS, 38 CPU SEC,
F8 CPU SED, 78 CPU SEI,
AA CPU TAX,
A8 CPU TAY, BA CPU TSX,
8A CPU TXA, 9A CPU TXS,
98 CPU TYA,

: MCP <BUILDS C, , DOES> DUP
1+ @ 80 AND IF 10 MODE +! THEN
OVER FF00 AND UPMODE UPMODE
IF MEM CR LATEST ID. 3 ERROR
THEN
C@ MODE C@ INDEX + C@ + C,
MODE C@ 7 AND IF MODE C@
F AND 7 <
IF C, ELSE , THEN THEN MEM ;

1C6E 60 MCP ADC, 1C6E 20
MCP AND, 1C6E C0 MCP CMP,
1C6E 40 MCP EOR, 1C6E A0 
MCP LDA, 1C6E 00 MCP ORA, 
1C6E E0 MCP SBC, 1C6C 80
MCP STA, 0D0D 01 MCP ASL,

( --> )




0C0C C1 MCP DEC, 0C0C E1
MCP INC, 0D0D 41 MCP LSR,
0D0D 21 MCP ROL, 0D0D 61
MCP ROR, 0414 81 MCP STX,
0486 E0 MCP CPX, 0486 C0
MCP CPY, 1496 A2 MCP LDX,
0C8E A0 MCP LDY, 048C 80
MCP STY, 0480 14 MCP JSR,
8480 40 MCP JMP, 0484 20
MCP BIT,

: BEGIN, HERE 1 ; IMMEDIATE

: UNTIL, ?EXEC >R 1 ?PAIRS R>
C, HERE 1+ - C, ; IMMEDIATE

: IF, C, HERE 0 C, 2 ;
IMMEDIATE

: THEN, ?EXEC 2 ?PAIRS HERE
OVER C@ IF SWAP ! ELSE OVER 1+
- SWAP C! THEN ;  IMMEDIATE

: ELSE, 2 ?PAIRS HERE 1+ 1 JMP,
SWAP HERE OVER 1+ - SWAP C! 2 ;
IMMEDIATE

( --> ) 


( --- )

: NOT 20 + ;

90 CONSTANT CS D0 CONSTANT 0=
10 CONSTANT 0< 90 CONSTANT >=

: C; CURRENT @ CONTEXT !
?EXEC ?CSP SMUDGE ; IMMEDIATE
: END-CODE [COMPILE] C; ;
IMMEDIATE
FORTH DEFINITIONS DECIMAL

: CODE ?EXEC CREATE [COMPILE]
ASSEMBLER ASSEMBLER MEM !CSP ;
IMMEDIATE ' ASSEMBLER CFA
' ;CODE 8 + !
LATEST 12 +ORIGIN !
HERE 28 +ORIGIN ! HERE 30
+ORIGIN ! HERE FENCE !
' ASSEMBLER 6 + 32 +ORIGIN !
BASE ! FORTH
: MAC  -FIND 0= 0 ?ERROR
DROP 32 C, , ; IMMEDIATE
( END )



( Public Domain 4th Tools v0.1 )
( For Extended fig-FORTH Rev.2 )
( Collected by BartGo 20231006 )
( 0x-0x: ASM   by WR,RP        )
( 35-35: This info screen      )
( 36-40: EDW   by RP           )
( 0x-0x: ED    by RP           )
( 41-51: EDIT  by M. Dougherty )
( 0x-0x: SERT  by ...          )
( 0x-0x: TRADE by ...          )
( 0x-0x: -                     )
( 0x-0x: -                     )
( See also:                    )
( FORTHCON.BAS by HS           )
( FORTHDOS.BAS by WV           )
;S
( - EDytor Wprowadzania: 1/5 - )
(    autor: Roland Pantola     )
(   [c]1992 Tajemnice Atari    )

( "FORGET TASK" to remove EDW! )
: TASK ;
: <=< OVER > >R < R> * ;
37000 CONSTANT AD0
0 VARIABLE AB  0 VARIABLE *K
0 VARIABLE LIN 0 VARIABLE EN
: AF AD0 AB @ + ;
: B32 32 BASE ! ;
: NK IF 0 0 ELSE B32 AF NUMBER
  DECIMAL 1024 U/ THEN ;
: N1 0 AF COUNT OVER + SWAP ;
( ( --> ) )
( - EDytor Wprowadzania: 2/5 - )  
: NU N1 DO
  I C@ 47 OVER 58 <=< 64 ROT
  87 <=< + 0= + LOOP NK ;
: K0 1 *K +! C@ *K @ * DUP
  EN +! + 1024 MOD ;
: K1 DO
  I K0 I C@ 0= IF I 38
  BLANKS LEAVE THEN LOOP ;
: KP 0 *K ! 4 AF C! 32 AF
  5 + C! NU 0 EN ! ;
: KOD= KP >R >R 0 AF 38 + AF 6
  + K1 R> = R> LIN @ = SWAP
  OVER * ; 
: .R2 0 <# # # #> TYPE SPACE ;
( --> ) 
( - EDytor Wprowadzania: 3/5 - )
: ?L LIN @ B32 .R2 DECIMAL ;
: WP 125 EMIT 1 LIN +!
  ." Do wprowadzenia linia "
  ?L CR CR ;
: ?DOB DROP AF 6 + AF 32 CMOVE
  32 AB +! WP 1 ;
: ?Z CR CR AF 1+ 37 TYPE 155
  EMIT 28 EMIT 0 ;
: LL
  ." Teraz potrzebna linia: "
  ?L ;
: ?ZLE 125 EMIT 0= IF LL ELSE
  ." Popraw: " THEN ?Z ;

( --> )
( - EDytor Wprowadzania: 4/5 - )
: KO KOD= IF ?DOB ELSE ?ZLE
  THEN EN @ 1442 = * ;
: GO 125 EMIT CR ." Gotowe!"
  CR ;
: E1 1 82 C! 0 AB ! 0 LIN !
  WP ;
: BBL AF 1024 AB @ OVER MOD
  - DUP AB +! BLANKS ;






( --> )
( - EDytor Wprowadzania: 5/5 - )

( EDW: --                      )
: EDW E1 BEGIN AF 39 ERASE
  AF 1+ 37 EXPECT KO UNTIL BBL
  GO ;

( EDW-SAVE: n --               )
: BSAV OVER + SWAP DO DUP I 0
  R/W B/BUF + LOOP DROP ;
: EDW-SAVE AD0 SWAP B/SCR *
  AB @ B/BUF / BSAV ;

;S

( /END )

( EDYTOR-FORTH /STARTS @ )
( autor: Roland Pantola )
( [c] 1992 T.A. ) : TASK ;
FORTH FORTH DEFINITIONS
0 VARIABLE #GGE
: GGE #GGE @ ; 129 #GGE !
: <=< OVER > >R < R> * ; ASSEMBLER
CODE INSTR 3 ,X LDA, XSAVE
 3 + STA, 2 ,X LDY,
0= IF, XSAVE 3 + DEC,
THEN, DEY, XSAVE 2+ STY,
0 ,X LDY, 4 ,X LDA,
BEGIN, XSAVE 2+ )Y CMP,
0= NOT IF, DEY, THEN,
0= UNTIL, 4 ,X STY,
 POPTWO JMP, END-CODE -->
( A ADR DLU --- NR )
: SELECT <BUILDS SMUDGE ] DOES>
SWAP 2 * + @ EXECUTE ;
: % COMPILE CLIT BL WORD HERE
NUMBER DROP -1 OVER 256 <=< 0=
IF CR ." Error: % " DUP .
 ENDIF C, ; IMMEDIATE
0 VARIABLE #C 2 ALLOT
64 #C C!
0 #C 1+ C!
32 #C 2+ C!
96 #C 3 + C!



-->

ASSEMBLER
CODE CMOVE> 2 ,X LDA, XSAVE 2+
STA, 4 ,X LDA, XSAVE 4 + STA,
1 ,X LDA, CLC, 5 ,X ADC,
XSAVE 5 + STA, 1 ,X LDA,
CLC, 3 ,X ADC, XSAVE 3 + STA,
BEGIN, 0 ,X LDY,
BEGIN, DEY, XSAVE 4 + )Y LDA,
XSAVE 2+ )Y STA, 0 # CPY, 0=
UNTIL, XSAVE 5 + DEC, XSAVE
3 + DEC, 0 ,X LDA, 0= IF,
1 ,X LDA, 0= NOT
IF, 1 ,X DEC, THEN, THEN,
0 # LDA, 0 ,X STA,
 1 ,X LDA, 0= UNTIL, -->
INX, INX, XSAVE STX, POPTWO
JMP, END-CODE ASSEMBLER

CODE ASC-PEEK XSAVE STX,
2 ,X LDA, XSAVE 2+ STA,
3 ,X LDA, XSAVE 3 + STA,
0 ,X LDY,
BEGIN, DEY, XSAVE 2+ )Y LDA,
96 # AND, .A LSR, .A LSR,
.A LSR, .A LSR, .A LSR, TAX,
XSAVE 2+ )Y LDA,
255 96 - # AND, #C ,X ORA,
XSAVE 2+ )Y STA, 0 # CPY,
0= UNTIL, XSAVE LDX,
POPTWO JMP, END-CODE
-->


: PEEK-ASC OVER OVER 2 0
DO ASC-PEEK LOOP ;
( ADDR DLU --- )
4 VARIABLE XPOS 4 VARIABLE YPOS
: XPOS@ XPOS @ ;
: YPOS@ YPOS @ ;
: POSE YPOS ! XPOS ! ;
48 CONSTANT ZERO
: X! % 85 ! ; : Y! % 84 C! ;
: X@ % 85 @ ; : Y@ % 84 C@ ;
: POS Y! X! ;
: 0.R ' ZERO CFA ' SPACE ! .R
' BL CFA ' SPACE ! ;
: BEEP 253 EMIT ; --> 

VOCABULARY EDITOR IMMEDIATE
EDITOR DEFINITIONS
: #DLE [ 112 C, 66 C, 48032 ,
2 C, 2 C, 2 C, 2 C, 2 C, 2 C,
 2 C, 2 C, 2 C, 2 C, 2 C, 2 C, 2
 C, 2 C, 2 C, 2 C, 2 C, 2 C, 2
 C, 2 C, 2 C, 2 C, 2 C, 2 C, 2
 C, 2 C, 2 C, 65 C, 47998 , ] ;
: #SCR? 0 % 10 POS ." SCR"
  0 % 12 POS SCR @ 3 0.R ;
: ADBUFF HERE 260 + ;
: LBUFF ADBUFF 2 - ;
: CZYBUFF ADBUFF % 4 -
@ 31886 = ;
-->


: #BUFF? CZYBUFF IF LBUFF
@ ELSE 0 ADBUFF 2 - ! 31886
ADBUFF 4 - ! 0 ENDIF 0 % 16 POS
." BUF" 0 % 18 POS % 3 0.R ;
: #DISPE ' #DLE 47998 % 34
CMOVE 47998 560 ! 48032 % 88 !
; : #RAMKA % 125 EMIT % 88 @
% 28 0 DO DUP I % 40 * + % 3 +
% 124 SWAP OVER OVER % 33 + ! !
LOOP DROP #SCR? #BUFF? ;
0 VARIABLE #LINIA0
: #W# SCR @ B/SCR * DUP B/SCR +
SWAP ; : #WEJ #W# DO I
 BLOCK % 128 ASC-PEEK LOOP ; -->
: #WYJ #W# DO I BLOCK % 128
PEEK-ASC LOOP ;
48036 CONSTANT ADE: : ADLINE
% 40 * ADE: + ;
: #KP SWAP OVER OVER 1 - C!
OVER OVER 32 + C! DROP DROP ;
: KK? ADLINE % 84 #KP ;
: PP? ADLINE % 124 #KP ;
: #LIN# DUP % 4 /MOD SCR @
B/SCR * + BLOCK SWAP % 32 * +
SWAP ADLINE #LINIA0 @ % 40 * -
; : LIN-E: #LIN# % 32 CMOVE ;
: EK-E: #LINIA0 @ DUP % 28 +
SWAP DO I LIN-E: LOOP ;
: LIN-BUF #LIN#  SWAP % 32
 CMOVE ; -->


: EK-BUF #LINIA0 @ DUP % 28 +
SWAP DO I LIN-BUF LOOP ;
: E:V ADLINE DUP % 40 - % 26
ADLINE DO I DUP % 40 + % 32
CMOVE -40 +LOOP % 32 ERASE ;

: E:^ ADLINE % 40 +
% 28 ADLINE
SWAP DO I DUP % 40 - % 32
CMOVE % 40 +LOOP % 27 ADLINE
% 32 ERASE ;

: LINB #LINIA0 @ + ;
: E: ADE: % 4 - -->
XPOS@ + YPOS@
% 40 * + ; : E:@ E: C@ ;
: E:! E: C! ;

: #KUR E:@ DUP % 127 >
IF % 128
- ELSE % 128 +
ENDIF E:! ;

: &PP
POSE #LINIA0 @ DUP 0=
IF 0 KK? ELSE 0 PP? ENDIF
% 4 = IF % 27 KK? ELSE % 27
PP? ENDIF ;

-->


: #POS SWAP DUP % 4 < IF DROP
% 35 SWAP % 1 - SWAP ENDIF
DUP % 35 > IF DROP % 4 SWAP
1+ SWAP ENDIF SWAP
DUP 0 < IF #LINIA0 8 IF % 27
LINB LIN-BUF
 -1 #LINIA0 +! 0 E:V 0 LINB
LIN-E: DROP 0
ELSE DROP % 27 ENDIF ENDIF
DUP % 27 > IF #LINIA0 @ 4 =
IF DROP 0 ELSE
0 LINB LIN-BUF 1 #LINIA0 +! 0
E:^ % 27 LINB LIN-E:
DROP % 27 ENDIF ENDIF &PP ; -->
: #PISZ DUP SP@ 1 ASC-PEEK #KUR
 E:! XPOS@ 1+ YPOS@ #POS #KUR ;
: #KXY@ #KUR XPOS@ YPOS@ ;
: #PK #POS #KUR ;
: ?< #KXY@ SWAP 1 - SWAP #PK ;
: ?> #KXY@ SWAP 1+ SWAP #PK ;
: ?^ #KXY@ 1 - #PK ;
: ?V #KXY@ 1+ #PK ;
: #RET #KXY@ 1+ SWAP DROP % 4
SWAP #PK 0 LBUFF ! #BUFF? ;
: #COF #KXY@ SWAP 1 - SWAP #POS
0 E:! #KUR ; : BFREE 430 LBUFF
@ % 32 * + 471 @ HERE - U< ;
: >BUFF YPOS@ ADLINE ADBUFF
LBUFF @ % 32 * + % 32 CMOVE
 1 LBUFF +! #BUFF? ; -->


0 VARIABLE #CM 67 ALLOT
: #BU# % 28 #LIN# DROP DUP
% 32 + % 96 ;
: #EB# % 27 ADLINE % 28 LINB
#LIN# DROP ;
: BUFV #BU#  CMOVE> ;

: BUF^ #BU# OVER >R >R SWAP R>
CMOVE R> % 64 + % 32 ERASE ;
: XSP DO I C@ 0= 0= IF DROP I
LEAVE ENDIF LOOP ;

: OSTLIN #LINIA0 @ % 4 = IF 0
 % 27 ADLINE DUP % 32 + -->
SWAP XSP ELSE 0 % 31 #LIN#
DROP DUP % 32 + SWAP XSP
ENDIF 0= ;

: #^^ BFREE IF #KUR >BUFF
YPOS@ E:^ #LINIA0 @
% 4 < IF #EB# SWAP % 32
CMOVE ENDIF BUF^ #KUR
ELSE BEEP BEEP ENDIF ;

: #VV OSTLIN IF
#KUR BUFV #LINIA0 @ % 4 <
IF #EB# % 32 CMOVE ENDIF
YPOS@ E:V #KUR ELSE BEEP
ENDIF ;
-->


: #<BF OSTLIN IF LBUFF @ IF #VV
-1 LBUFF +! ADBUFF LBUFF @
32 * + YPOS@ ADLINE % 32
CMOVE #BUFF? #KUR ENDIF ELSE
BEEP ENDIF ;
: X#CM #CM XPOS@ + % 4 - ;
: XSPAC #CM % 63 + DUP X#CM
XSP #CM % 64 + DUP ROT
DO I C@ 0= I 1+ C@
0= * IF DROP I LEAVE
ENDIF LOOP X#CM - ;
: <#CM> YPOS@ #LINIA0 @ XPOS@
YPOS@ 1+ #POS #LINIA0 @ = 0=
- YPOS ! -->
YPOS@ ADLINE #CM OVER OVER
YPOS@ % 27 < IF SWAP % 40
+ SWAP % 32 + ENDIF ;
: 32CM % 32 CMOVE ;
: >#CM  #KUR <#CM> #CM 66
ERASE 32CM 32CM ;
: <#CM <#CM> SWAP 32CM SWAP
32CM #KUR ;
: #> >#CM XSPAC #CM % 63 +
C@ 0= OVER X#CM + #CM - % 63
< + IF X#CM DUP 1+ ROT
CMOVE> 0 X#CM C! ELSE BEEP
DROP ENDIF <#CM ;
: #< >#CM X#CM 1+ DUP 1 -
XSPAC CMOVE <#CM ;
-->
( --- )

: #DUP DUP DUP % 127 >
IF % 128 - ENDIF ;
: ESC DROP KEY #DUP BL = IF
DROP 300 ELSE #PISZ ENDIF ;
: #KLA0 [ 27 C, 28 C, 29 C, 30
C, 31 C, 155 C, 126 C, 254 C,
255 C, 156 C, 157 C, 127 C,
] ;
: #NR-KLAW ' #KLA0 % 12 INSTR ;
SELECT #WYB0 #PISZ ESC ?^ ?V ?<
 ?> #RET #COF #< #> #^^ #VV
#<BF ;

-->
FORTH DEFINITIONS
: (E) EDITOR  #WEJ
1 752 C! #DISPE #RAMKA
XPOS@ YPOS@ #POS
EK-E: #KUR
BEGIN
KEY DUP #NR-KLAW #WYB0
300 = UNTIL
#KUR EK-BUF #WYJ FORTH ;
: EXFO % 125 EMIT % 80 % 88 +!
." FORTH" CR 0 752 C! ;
: CLEAR % 16 0 DO I SCR @
(LINE) DROP C/L BLANKS UPDATE
LOOP ;

-->
( EDYTOR-FORTH /ENDS     )
( ED-DYSK )
: MARK SCR @ % 8 * % 8 0 DO I
OVER + BLOCK DROP UPDATE
LOOP DROP ;
: E. (E) EXFO ;
: L. SCR ! E. ;
: F. MARK FLUSH ;
: INDE EMPTY-BUFFERS
GGE SWAP GGE 1 - MIN
DO I 8 * BLOCK 32 -TRAILING
OVER @ DUP 8224 = 0= * IF CR
I . SPACE TYPE ELSE 2DROP ENDIF
?TERMINAL IF LEAVE ENDIF
LOOP EMPTY-BUFFERS ;
: IND 1 INDE ; ;S ( /END )
